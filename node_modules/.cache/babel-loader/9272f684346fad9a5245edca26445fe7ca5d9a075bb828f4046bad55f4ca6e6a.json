{"ast":null,"code":"export async function generateMCQs(config) {\n  const {\n    topics,\n    questionCount,\n    difficulty,\n    type\n  } = config;\n  console.log(\"üîß generateMCQs called with config:\", config);\n  const prompt = `\nGenerate a JSON array of ${questionCount} MCQs about the following topics: ${topics}.\nDifficulty level: ${difficulty}.\nQuestion type: ${type === \"single\" ? \"Single correct\" : \"Multiple correct\"} answer.\n\nEach question object should have:\n- \"questionText\" (string)\n- \"options\" (array of strings)\n- \"correctAnswers\" (array of strings)\n\nRespond ONLY with valid JSON.\n`;\n  const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n  console.log(\"üì§ Sending fetch request to OpenAI...\");\n  console.log(\"üîê Using API key:\", apiKey ? \"‚úÖ present\" : \"‚ùå missing\");\n  console.log(\"üì¶ Request body:\", JSON.stringify({\n    model: \"gpt-4o\",\n    messages: [{\n      role: \"user\",\n      content: prompt\n    }],\n    temperature: 0.7\n  }));\n  try {\n    const res = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-4o\",\n        messages: [{\n          role: \"user\",\n          content: prompt\n        }],\n        temperature: 0.7\n      })\n    });\n    console.log(\"üì∂ Status Code:\", res.status);\n    if (res.status === 429) {\n      console.warn(\"üö´ Rate limit hit! Returning fallback dummy questions.\");\n      return JSON.stringify(getDummyQuestions());\n    }\n    if (!res.ok) {\n      const errorText = await res.text();\n      console.error(\"‚ùå OpenAI API Error:\", errorText);\n      throw new Error(\"OpenAI API request failed\");\n    }\n    const data = await res.json();\n    const content = data.choices[0].message.content.trim();\n    console.log(\"üì• OpenAI returned content:\", content);\n    return content;\n  } catch (err) {\n    console.error(\"‚ùå generateMCQs failed:\", err);\n    // As a final fallback\n    return JSON.stringify(getDummyQuestions());\n  }\n}\n\n// ‚úÖ Dummy fallback for testing\nfunction getDummyQuestions() {\n  return [{\n    questionText: \"What does CSS stand for?\",\n    options: [\"Cascading Style Sheets\", \"Creative Style Syntax\", \"Computer Style Sheets\", \"Colorful Style Script\"],\n    correctAnswers: [\"Cascading Style Sheets\"]\n  }, {\n    questionText: \"Which CSS property controls the text size?\",\n    options: [\"font-style\", \"text-size\", \"font-size\", \"text-style\"],\n    correctAnswers: [\"font-size\"]\n  }, {\n    questionText: \"Which HTML tag is used to link an external CSS file?\",\n    options: [\"<link>\", \"<style>\", \"<script>\", \"<css>\"],\n    correctAnswers: [\"<link>\"]\n  }\n  // Add more if needed...\n  ];\n}","map":{"version":3,"names":["generateMCQs","config","topics","questionCount","difficulty","type","console","log","prompt","apiKey","process","env","REACT_APP_OPENAI_API_KEY","JSON","stringify","model","messages","role","content","temperature","res","fetch","method","headers","Authorization","body","status","warn","getDummyQuestions","ok","errorText","text","error","Error","data","json","choices","message","trim","err","questionText","options","correctAnswers"],"sources":["C:/Users/gaura/mock-test-generator/src/utils/openai.js"],"sourcesContent":["export async function generateMCQs(config) {\r\n  const { topics, questionCount, difficulty, type } = config;\r\n  console.log(\"üîß generateMCQs called with config:\", config);\r\n\r\n  const prompt = `\r\nGenerate a JSON array of ${questionCount} MCQs about the following topics: ${topics}.\r\nDifficulty level: ${difficulty}.\r\nQuestion type: ${type === \"single\" ? \"Single correct\" : \"Multiple correct\"} answer.\r\n\r\nEach question object should have:\r\n- \"questionText\" (string)\r\n- \"options\" (array of strings)\r\n- \"correctAnswers\" (array of strings)\r\n\r\nRespond ONLY with valid JSON.\r\n`;\r\n\r\n  const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\r\n\r\n  console.log(\"üì§ Sending fetch request to OpenAI...\");\r\n  console.log(\"üîê Using API key:\", apiKey ? \"‚úÖ present\" : \"‚ùå missing\");\r\n  console.log(\"üì¶ Request body:\", JSON.stringify({\r\n    model: \"gpt-4o\",\r\n    messages: [{ role: \"user\", content: prompt }],\r\n    temperature: 0.7,\r\n  }));\r\n\r\n  try {\r\n    const res = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${apiKey}`,\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"gpt-4o\",\r\n        messages: [{ role: \"user\", content: prompt }],\r\n        temperature: 0.7,\r\n      }),\r\n    });\r\n\r\n    console.log(\"üì∂ Status Code:\", res.status);\r\n\r\n    if (res.status === 429) {\r\n      console.warn(\"üö´ Rate limit hit! Returning fallback dummy questions.\");\r\n      return JSON.stringify(getDummyQuestions());\r\n    }\r\n\r\n    if (!res.ok) {\r\n      const errorText = await res.text();\r\n      console.error(\"‚ùå OpenAI API Error:\", errorText);\r\n      throw new Error(\"OpenAI API request failed\");\r\n    }\r\n\r\n    const data = await res.json();\r\n    const content = data.choices[0].message.content.trim();\r\n    console.log(\"üì• OpenAI returned content:\", content);\r\n    return content;\r\n\r\n  } catch (err) {\r\n    console.error(\"‚ùå generateMCQs failed:\", err);\r\n    // As a final fallback\r\n    return JSON.stringify(getDummyQuestions());\r\n  }\r\n}\r\n\r\n// ‚úÖ Dummy fallback for testing\r\nfunction getDummyQuestions() {\r\n  return [\r\n    {\r\n      questionText: \"What does CSS stand for?\",\r\n      options: [\r\n        \"Cascading Style Sheets\",\r\n        \"Creative Style Syntax\",\r\n        \"Computer Style Sheets\",\r\n        \"Colorful Style Script\"\r\n      ],\r\n      correctAnswers: [\"Cascading Style Sheets\"]\r\n    },\r\n    {\r\n      questionText: \"Which CSS property controls the text size?\",\r\n      options: [\"font-style\", \"text-size\", \"font-size\", \"text-style\"],\r\n      correctAnswers: [\"font-size\"]\r\n    },\r\n    {\r\n      questionText: \"Which HTML tag is used to link an external CSS file?\",\r\n      options: [\"<link>\", \"<style>\", \"<script>\", \"<css>\"],\r\n      correctAnswers: [\"<link>\"]\r\n    }\r\n    // Add more if needed...\r\n  ];\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}