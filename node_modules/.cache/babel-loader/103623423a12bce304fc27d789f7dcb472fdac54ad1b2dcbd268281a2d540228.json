{"ast":null,"code":"export async function generateMCQs(config) {\n  const {\n    topics,\n    questionCount,\n    difficulty,\n    type\n  } = config;\n  console.log(\"🔧 generateMCQs called with config:\", config);\n  const prompt = `\nGenerate a JSON array of ${questionCount} MCQs about the following topics: ${topics}.\nDifficulty level: ${difficulty}.\nQuestion type: ${type === \"single\" ? \"Single correct\" : \"Multiple correct\"} answer.\n\nEach question object should have:\n- \"questionText\" (string)\n- \"options\" (array of strings)\n- \"correctAnswers\" (array of strings)\n\nRespond ONLY with valid JSON.\n`;\n\n  // 🛑 IMPORTANT: Use your Google API Key, which you already have\n  // Make sure this is loaded from your .env file as REACT_APP_GOOGLE_API_KEY or similar\n  const googleApiKey = process.env.REACT_APP_GOOGLE_API_KEY; // <--- CHANGE ENV VAR NAME\n\n  console.log(\"📤 Sending fetch request to Gemini API...\");\n  console.log(\"🔐 Using API key:\", googleApiKey ? \"✅ present\" : \"❌ missing\");\n  console.log(\"📦 Request body:\", JSON.stringify({\n    // For Gemini API, 'model' goes inside the URL or is inferred\n    // 'contents' is the key for the input message\n    contents: [{\n      parts: [{\n        text: prompt\n      }]\n    }],\n    generationConfig: {\n      temperature: 0.7,\n      responseMimeType: \"application/json\" // Very important for JSON output\n    }\n  }));\n  try {\n    // 🛑 CHANGE THE ENDPOINT TO GOOGLE'S GEMINI API\n    // Use gemini-1.5-flash for speed/cost, or gemini-1.5-pro for more complex needs\n    const res = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${googleApiKey}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n        // For direct fetch with Gemini, the API key is usually a query param\n        // or in the x-goog-api-key header, but not 'Bearer'\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          responseMimeType: \"application/json\"\n        }\n      })\n    });\n    console.log(\"📶 Status Code:\", res.status);\n    if (res.status === 429) {\n      // Rate limit for Gemini is different, but this check is fine\n      console.warn(\"🚫 Gemini API rate limit hit! Returning fallback dummy questions.\");\n      return JSON.stringify(getDummyQuestions());\n    }\n    if (!res.ok) {\n      const errorData = await res.json(); // Gemini often returns JSON errors\n      console.error(\"❌ Gemini API Error:\", errorData);\n      throw new Error(\"Gemini API request failed: \" + JSON.stringify(errorData));\n    }\n    const data = await res.json();\n    // Gemini API response structure is different\n    // Access the text from the candidates array\n    const content = data.candidates[0].content.parts[0].text.trim();\n    console.log(\"📥 Gemini returned content:\", content);\n    return content;\n  } catch (err) {\n    console.error(\"❌ generateMCQs failed:\", err);\n    return JSON.stringify(getDummyQuestions());\n  }\n}\nfunction getDummyQuestions() {\n  return [];\n}","map":{"version":3,"names":["generateMCQs","config","topics","questionCount","difficulty","type","console","log","prompt","googleApiKey","process","env","REACT_APP_GOOGLE_API_KEY","JSON","stringify","contents","parts","text","generationConfig","temperature","responseMimeType","res","fetch","method","headers","body","status","warn","getDummyQuestions","ok","errorData","json","error","Error","data","content","candidates","trim","err"],"sources":["C:/Users/gaura/mock-test-generator/src/utils/openai.js"],"sourcesContent":["export async function generateMCQs(config) {\r\n    const { topics, questionCount, difficulty, type } = config;\r\n    console.log(\"🔧 generateMCQs called with config:\", config);\r\n\r\n    const prompt = `\r\nGenerate a JSON array of ${questionCount} MCQs about the following topics: ${topics}.\r\nDifficulty level: ${difficulty}.\r\nQuestion type: ${type === \"single\" ? \"Single correct\" : \"Multiple correct\"} answer.\r\n\r\nEach question object should have:\r\n- \"questionText\" (string)\r\n- \"options\" (array of strings)\r\n- \"correctAnswers\" (array of strings)\r\n\r\nRespond ONLY with valid JSON.\r\n`;\r\n\r\n    // 🛑 IMPORTANT: Use your Google API Key, which you already have\r\n    // Make sure this is loaded from your .env file as REACT_APP_GOOGLE_API_KEY or similar\r\n    const googleApiKey = process.env.REACT_APP_GOOGLE_API_KEY; // <--- CHANGE ENV VAR NAME\r\n\r\n    console.log(\"📤 Sending fetch request to Gemini API...\");\r\n    console.log(\"🔐 Using API key:\", googleApiKey ? \"✅ present\" : \"❌ missing\");\r\n    console.log(\"📦 Request body:\", JSON.stringify({\r\n        // For Gemini API, 'model' goes inside the URL or is inferred\r\n        // 'contents' is the key for the input message\r\n        contents: [{ parts: [{ text: prompt }] }],\r\n        generationConfig: {\r\n            temperature: 0.7,\r\n            responseMimeType: \"application/json\" // Very important for JSON output\r\n        }\r\n    }));\r\n\r\n    try {\r\n        // 🛑 CHANGE THE ENDPOINT TO GOOGLE'S GEMINI API\r\n        // Use gemini-1.5-flash for speed/cost, or gemini-1.5-pro for more complex needs\r\n        const res = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${googleApiKey}`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                // For direct fetch with Gemini, the API key is usually a query param\r\n                // or in the x-goog-api-key header, but not 'Bearer'\r\n            },\r\n            body: JSON.stringify({\r\n                contents: [{ parts: [{ text: prompt }] }],\r\n                generationConfig: {\r\n                    temperature: 0.7,\r\n                    responseMimeType: \"application/json\"\r\n                }\r\n            }),\r\n        });\r\n\r\n        console.log(\"📶 Status Code:\", res.status);\r\n\r\n        if (res.status === 429) { // Rate limit for Gemini is different, but this check is fine\r\n            console.warn(\"🚫 Gemini API rate limit hit! Returning fallback dummy questions.\");\r\n            return JSON.stringify(getDummyQuestions());\r\n        }\r\n\r\n        if (!res.ok) {\r\n            const errorData = await res.json(); // Gemini often returns JSON errors\r\n            console.error(\"❌ Gemini API Error:\", errorData);\r\n            throw new Error(\"Gemini API request failed: \" + JSON.stringify(errorData));\r\n        }\r\n\r\n        const data = await res.json();\r\n        // Gemini API response structure is different\r\n        // Access the text from the candidates array\r\n        const content = data.candidates[0].content.parts[0].text.trim();\r\n        console.log(\"📥 Gemini returned content:\", content);\r\n        return content;\r\n\r\n    } catch (err) {\r\n        console.error(\"❌ generateMCQs failed:\", err);\r\n        return JSON.stringify(getDummyQuestions());\r\n    }\r\n}\r\n\r\nfunction getDummyQuestions() {\r\n    return [\r\n        \r\n    ];\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}