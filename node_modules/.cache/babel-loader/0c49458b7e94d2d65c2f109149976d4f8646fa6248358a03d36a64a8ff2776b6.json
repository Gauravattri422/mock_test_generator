{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaura\\\\mock-test-generator\\\\src\\\\pages\\\\TestPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Timer from \"../components/Timer\";\nimport QuestionCard from \"../components/QuestionCard\";\nimport Loader from \"../components/Loader\";\nimport { generateMCQs } from \"../utils/openai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TestPage() {\n  _s();\n  const navigate = useNavigate();\n  const [config, setConfig] = useState(null);\n  const [questions, setQuestions] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [paused, setPaused] = useState(false);\n  const [timeExpired, setTimeExpired] = useState(false);\n\n  // STEP 1: Load config from localStorage\n  useEffect(() => {\n    const cfg = localStorage.getItem(\"mockConfig\");\n    console.log(\"Retrieved mockConfig from localStorage:\", cfg);\n    if (!cfg) {\n      alert(\"No test config found. Redirecting to home.\");\n      navigate(\"/\");\n      return;\n    }\n    console.log(\"📥 Raw response from API (before parse):\", rawQuestions);\n    try {\n      const parsed = JSON.parse(cfg);\n      console.log(\"Parsed config object:\", parsed);\n      setConfig(parsed);\n    } catch (err) {\n      console.error(\"Error parsing config:\", err);\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n  // STEP 2: Fetch questions from API\n  useEffect(() => {\n    if (!config) return;\n    async function fetchQuestions() {\n      setLoading(true);\n      try {\n        console.log(\"Sending request to generateMCQs with config:\", config);\n        const rawQuestions = await generateMCQs({\n          topics: config.topics,\n          questionCount: Number(config.questionCount),\n          difficulty: config.difficulty,\n          type: config.type\n        });\n        //console.log(\"Raw response from generateMCQs:\", rawQuestions);\n\n        const parsed = JSON.parse(rawQuestions);\n        console.log(\"Parsed questions array:\", parsed);\n        if (!Array.isArray(parsed) || parsed.length === 0) {\n          throw new Error(\"Parsed questions are empty or invalid.\");\n        }\n        setQuestions(parsed);\n      } catch (err) {\n        console.error(\"Failed to load or parse questions:\", err);\n        alert(\"Failed to load questions. Try again.\");\n        navigate(\"/\");\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchQuestions();\n  }, [config, navigate]);\n\n  // STEP 3: Answer logic\n  function setAnswerForCurrent(ans) {\n    setAnswers(prev => ({\n      ...prev,\n      [currentIndex]: ans\n    }));\n    console.log(\"Updated answers state:\", {\n      ...answers,\n      [currentIndex]: ans\n    });\n  }\n  function nextQuestion() {\n    if (currentIndex < questions.length - 1) setCurrentIndex(currentIndex + 1);\n  }\n  function prevQuestion() {\n    if (currentIndex > 0) setCurrentIndex(currentIndex - 1);\n  }\n  function submitTest() {\n    localStorage.setItem(\"mockResult\", JSON.stringify({\n      answers,\n      questions,\n      config\n    }));\n    console.log(\"Test submitted. Stored in localStorage:\", {\n      answers,\n      questions,\n      config\n    });\n    navigate(\"/result\");\n  }\n  if (loading) {\n    console.log(\"Loading state is true. Showing loader...\");\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 12\n    }, this);\n  }\n  if (timeExpired) {\n    alert(\"Time is up! Test will be submitted automatically.\");\n    submitTest();\n    return null;\n  }\n  if (!questions || questions.length === 0) {\n    console.warn(\"Questions are empty. Cannot render test.\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container py-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\u274C Failed to load questions. Please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: () => navigate(\"/\"),\n        children: \"\\uD83D\\uDD04 Go Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  }\n\n  // MAIN RENDER\n  if (!loading && questions) {\n    console.log(\"📦 Question passed to QuestionCard:\", questions[currentIndex]);\n    console.log(\"🧠 User answer so far:\", answers[currentIndex] || []);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container py-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-between align-items-center mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        durationMinutes: config.duration,\n        paused: paused,\n        onExpire: () => setTimeExpired(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-warning me-2\",\n          onClick: () => setPaused(p => !p),\n          children: paused ? \"Resume\" : \"Pause\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger\",\n          onClick: submitTest,\n          children: \"Submit Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuestionCard, {\n      question: questions[currentIndex],\n      index: currentIndex,\n      total: questions.length,\n      userAnswer: answers[currentIndex] || [],\n      setUserAnswer: setAnswerForCurrent,\n      type: config.type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-between mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: prevQuestion,\n        disabled: currentIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: nextQuestion,\n        disabled: currentIndex === questions.length - 1,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(TestPage, \"cAGJVE7Rd2D+nXZmmNqwTdRluWk=\", false, function () {\n  return [useNavigate];\n});\n_c = TestPage;\nvar _c;\n$RefreshReg$(_c, \"TestPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Timer","QuestionCard","Loader","generateMCQs","jsxDEV","_jsxDEV","TestPage","_s","navigate","config","setConfig","questions","setQuestions","loading","setLoading","currentIndex","setCurrentIndex","answers","setAnswers","paused","setPaused","timeExpired","setTimeExpired","cfg","localStorage","getItem","console","log","alert","rawQuestions","parsed","JSON","parse","err","error","fetchQuestions","topics","questionCount","Number","difficulty","type","Array","isArray","length","Error","setAnswerForCurrent","ans","prev","nextQuestion","prevQuestion","submitTest","setItem","stringify","fileName","_jsxFileName","lineNumber","columnNumber","warn","className","children","onClick","durationMinutes","duration","onExpire","p","question","index","total","userAnswer","setUserAnswer","disabled","_c","$RefreshReg$"],"sources":["C:/Users/gaura/mock-test-generator/src/pages/TestPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Timer from \"../components/Timer\";\r\nimport QuestionCard from \"../components/QuestionCard\";\r\nimport Loader from \"../components/Loader\";\r\nimport { generateMCQs } from \"../utils/openai\";\r\n\r\nexport default function TestPage() {\r\n  const navigate = useNavigate();\r\n  const [config, setConfig] = useState(null);\r\n  const [questions, setQuestions] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [answers, setAnswers] = useState({});\r\n  const [paused, setPaused] = useState(false);\r\n  const [timeExpired, setTimeExpired] = useState(false);\r\n\r\n  // STEP 1: Load config from localStorage\r\n  useEffect(() => {\r\n    const cfg = localStorage.getItem(\"mockConfig\");\r\n    console.log(\"Retrieved mockConfig from localStorage:\", cfg);\r\n    if (!cfg) {\r\n      alert(\"No test config found. Redirecting to home.\");\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n      console.log(\"📥 Raw response from API (before parse):\", rawQuestions);\r\n    try {\r\n      const parsed = JSON.parse(cfg);\r\n      console.log(\"Parsed config object:\", parsed);\r\n      setConfig(parsed);\r\n    } catch (err) {\r\n      console.error(\"Error parsing config:\", err);\r\n      navigate(\"/\");\r\n    }\r\n  }, [navigate]);\r\n\r\n  // STEP 2: Fetch questions from API\r\n  useEffect(() => {\r\n    if (!config) return;\r\n\r\n    async function fetchQuestions() {\r\n      setLoading(true);\r\n      try {\r\n        console.log(\"Sending request to generateMCQs with config:\", config);\r\n        const rawQuestions = await generateMCQs({\r\n          topics: config.topics,\r\n          questionCount: Number(config.questionCount),\r\n          difficulty: config.difficulty,\r\n          type: config.type,\r\n        });\r\n        //console.log(\"Raw response from generateMCQs:\", rawQuestions);\r\n\r\n        const parsed = JSON.parse(rawQuestions);\r\n        console.log(\"Parsed questions array:\", parsed);\r\n\r\n        if (!Array.isArray(parsed) || parsed.length === 0) {\r\n          throw new Error(\"Parsed questions are empty or invalid.\");\r\n        }\r\n\r\n        setQuestions(parsed);\r\n      } catch (err) {\r\n        console.error(\"Failed to load or parse questions:\", err);\r\n        alert(\"Failed to load questions. Try again.\");\r\n        navigate(\"/\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchQuestions();\r\n  }, [config, navigate]);\r\n\r\n  // STEP 3: Answer logic\r\n  function setAnswerForCurrent(ans) {\r\n    setAnswers((prev) => ({\r\n      ...prev,\r\n      [currentIndex]: ans,\r\n    }));\r\n    console.log(\"Updated answers state:\", {\r\n      ...answers,\r\n      [currentIndex]: ans,\r\n    });\r\n  }\r\n\r\n  function nextQuestion() {\r\n    if (currentIndex < questions.length - 1) setCurrentIndex(currentIndex + 1);\r\n  }\r\n\r\n  function prevQuestion() {\r\n    if (currentIndex > 0) setCurrentIndex(currentIndex - 1);\r\n  }\r\n\r\n  function submitTest() {\r\n    localStorage.setItem(\r\n      \"mockResult\",\r\n      JSON.stringify({ answers, questions, config })\r\n    );\r\n    console.log(\"Test submitted. Stored in localStorage:\", {\r\n      answers,\r\n      questions,\r\n      config,\r\n    });\r\n    navigate(\"/result\");\r\n  }\r\n\r\n  if (loading) {\r\n    console.log(\"Loading state is true. Showing loader...\");\r\n    return <Loader />;\r\n  }\r\n\r\n  if (timeExpired) {\r\n    alert(\"Time is up! Test will be submitted automatically.\");\r\n    submitTest();\r\n    return null;\r\n  }\r\n\r\n  if (!questions || questions.length === 0) {\r\n    console.warn(\"Questions are empty. Cannot render test.\");\r\n    return (\r\n      <div className=\"container py-4\">\r\n        <h4>❌ Failed to load questions. Please try again.</h4>\r\n        <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\r\n          🔄 Go Back to Home\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // MAIN RENDER\r\n  if (!loading && questions) {\r\n  console.log(\"📦 Question passed to QuestionCard:\", questions[currentIndex]);\r\n  console.log(\"🧠 User answer so far:\", answers[currentIndex] || []);\r\n}\r\n  return (\r\n    <div className=\"container py-4\">\r\n      <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n        <Timer\r\n          durationMinutes={config.duration}\r\n          paused={paused}\r\n          onExpire={() => setTimeExpired(true)}\r\n        />\r\n        <div>\r\n          <button\r\n            className=\"btn btn-warning me-2\"\r\n            onClick={() => setPaused((p) => !p)}\r\n          >\r\n            {paused ? \"Resume\" : \"Pause\"}\r\n          </button>\r\n          <button className=\"btn btn-danger\" onClick={submitTest}>\r\n            Submit Test\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <QuestionCard\r\n        question={questions[currentIndex]}\r\n        index={currentIndex}\r\n        total={questions.length}\r\n        userAnswer={answers[currentIndex] || []}\r\n        setUserAnswer={setAnswerForCurrent}\r\n        type={config.type}\r\n      />\r\n\r\n      <div className=\"d-flex justify-content-between mt-3\">\r\n        <button\r\n          className=\"btn btn-secondary\"\r\n          onClick={prevQuestion}\r\n          disabled={currentIndex === 0}\r\n        >\r\n          Previous\r\n        </button>\r\n        <button\r\n          className=\"btn btn-secondary\"\r\n          onClick={nextQuestion}\r\n          disabled={currentIndex === questions.length - 1}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}