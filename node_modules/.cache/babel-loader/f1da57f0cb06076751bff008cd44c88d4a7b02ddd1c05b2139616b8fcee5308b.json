{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaura\\\\mock-test-generator\\\\src\\\\components\\\\QuestionCard.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuestionCard({\n  question,\n  index,\n  total,\n  userAnswer,\n  setUserAnswer,\n  type\n}) {\n  if (!question) return null;\n  const handleSelect = opt => {\n    if (type === \"single\") {\n      setUserAnswer([opt]);\n    } else {\n      if (userAnswer.includes(opt)) {\n        setUserAnswer(userAnswer.filter(o => o !== opt));\n      } else {\n        setUserAnswer([...userAnswer, opt]);\n      }\n    }\n  };\n  const isSelected = opt => userAnswer.includes(opt);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card shadow-sm mb-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: [\"Question \", index + 1, \" of \", total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: question.options.map((opt, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `list-group-item ${isSelected(opt) ? \"active text-white\" : \"\"}`,\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: () => handleSelect(opt),\n          children: opt\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_c = QuestionCard;\nvar _c;\n$RefreshReg$(_c, \"QuestionCard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","QuestionCard","question","index","total","userAnswer","setUserAnswer","type","handleSelect","opt","includes","filter","o","isSelected","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","map","i","style","cursor","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gaura/mock-test-generator/src/components/QuestionCard.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nexport default function QuestionCard({\r\n  question,\r\n  index,\r\n  total,\r\n  userAnswer,\r\n  setUserAnswer,\r\n  type,\r\n}) {\r\n  if (!question) return null;\r\n\r\n  const handleSelect = (opt) => {\r\n    if (type === \"single\") {\r\n      setUserAnswer([opt]);\r\n    } else {\r\n      if (userAnswer.includes(opt)) {\r\n        setUserAnswer(userAnswer.filter((o) => o !== opt));\r\n      } else {\r\n        setUserAnswer([...userAnswer, opt]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const isSelected = (opt) => userAnswer.includes(opt);\r\n\r\n  return (\r\n    <div className=\"card shadow-sm mb-4\">\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">\r\n          Question {index + 1} of {total}\r\n        </h5>\r\n        <p className=\"card-text\">{question.question}</p>\r\n        <ul className=\"list-group\">\r\n          {question.options.map((opt, i) => (\r\n            <li\r\n              key={i}\r\n              className={`list-group-item ${\r\n                isSelected(opt) ? \"active text-white\" : \"\"\r\n              }`}\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={() => handleSelect(opt)}\r\n            >\r\n              {opt}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,YAAYA,CAAC;EACnCC,QAAQ;EACRC,KAAK;EACLC,KAAK;EACLC,UAAU;EACVC,aAAa;EACbC;AACF,CAAC,EAAE;EACD,IAAI,CAACL,QAAQ,EAAE,OAAO,IAAI;EAE1B,MAAMM,YAAY,GAAIC,GAAG,IAAK;IAC5B,IAAIF,IAAI,KAAK,QAAQ,EAAE;MACrBD,aAAa,CAAC,CAACG,GAAG,CAAC,CAAC;IACtB,CAAC,MAAM;MACL,IAAIJ,UAAU,CAACK,QAAQ,CAACD,GAAG,CAAC,EAAE;QAC5BH,aAAa,CAACD,UAAU,CAACM,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKH,GAAG,CAAC,CAAC;MACpD,CAAC,MAAM;QACLH,aAAa,CAAC,CAAC,GAAGD,UAAU,EAAEI,GAAG,CAAC,CAAC;MACrC;IACF;EACF,CAAC;EAED,MAAMI,UAAU,GAAIJ,GAAG,IAAKJ,UAAU,CAACK,QAAQ,CAACD,GAAG,CAAC;EAEpD,oBACET,OAAA;IAAKc,SAAS,EAAC,qBAAqB;IAAAC,QAAA,eAClCf,OAAA;MAAKc,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBf,OAAA;QAAIc,SAAS,EAAC,YAAY;QAAAC,QAAA,GAAC,WAChB,EAACZ,KAAK,GAAG,CAAC,EAAC,MAAI,EAACC,KAAK;MAAA;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC,eACLnB,OAAA;QAAGc,SAAS,EAAC,WAAW;QAAAC,QAAA,EAAEb,QAAQ,CAACA;MAAQ;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChDnB,OAAA;QAAIc,SAAS,EAAC,YAAY;QAAAC,QAAA,EACvBb,QAAQ,CAACkB,OAAO,CAACC,GAAG,CAAC,CAACZ,GAAG,EAAEa,CAAC,kBAC3BtB,OAAA;UAEEc,SAAS,EAAE,mBACTD,UAAU,CAACJ,GAAG,CAAC,GAAG,mBAAmB,GAAG,EAAE,EACzC;UACHc,KAAK,EAAE;YAAEC,MAAM,EAAE;UAAU,CAAE;UAC7BC,OAAO,EAAEA,CAAA,KAAMjB,YAAY,CAACC,GAAG,CAAE;UAAAM,QAAA,EAEhCN;QAAG,GAPCa,CAAC;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQJ,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACO,EAAA,GAhDuBzB,YAAY;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}