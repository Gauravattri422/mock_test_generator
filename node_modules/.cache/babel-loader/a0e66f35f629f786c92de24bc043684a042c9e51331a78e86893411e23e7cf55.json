{"ast":null,"code":"// src/utils/openai.js\n\nexport async function generateMCQs(config) {\n  var _data$choices$, _data$choices$$messag;\n  const {\n    topics,\n    questionCount,\n    difficulty,\n    type\n  } = config;\n  console.log(\"üîß generateMCQs called with config:\", config);\n  const prompt = `\nGenerate a JSON array of ${questionCount} MCQs about the following topics: ${topics}.\nDifficulty level: ${difficulty}.\nQuestion type: ${type === \"single\" ? \"Single correct\" : \"Multiple correct\"} answer.\n\nEach question object should have:\n- \"questionText\" (string)\n- \"options\" (array of strings)\n- \"correctAnswers\" (array of strings)\n\nRespond ONLY with valid JSON.\n`;\n  const bodyPayload = {\n    model: \"gpt-4o\",\n    messages: [{\n      role: \"user\",\n      content: prompt\n    }],\n    temperature: 0.7\n  };\n  console.log(\"üì§ Sending fetch request to OpenAI...\");\n  console.log(\"üîê Using API key:\", process.env.REACT_APP_OPENAI_API_KEY ? \"‚úÖ present\" : \"‚ùå missing\");\n  console.log(\"üì¶ Request body:\", JSON.stringify(bodyPayload));\n  let res;\n  try {\n    res = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`\n      },\n      body: JSON.stringify(bodyPayload)\n    });\n  } catch (networkError) {\n    console.error(\"üåê Network error when contacting OpenAI:\", networkError);\n    throw new Error(\"Network request failed\");\n  }\n  console.log(\"üì∂ Status Code:\", res.status);\n  if (!res.ok) {\n    const errorText = await res.text();\n    console.error(\"‚ùå OpenAI API Error Response:\", errorText);\n    throw new Error(\"OpenAI API request failed\");\n  }\n  const data = await res.json();\n  console.log(\"üì® OpenAI JSON response:\", data);\n  if (!data || !data.choices || !((_data$choices$ = data.choices[0]) !== null && _data$choices$ !== void 0 && (_data$choices$$messag = _data$choices$.message) !== null && _data$choices$$messag !== void 0 && _data$choices$$messag.content)) {\n    console.error(\"‚ùå Invalid OpenAI response format:\", data);\n    throw new Error(\"OpenAI response missing expected content\");\n  }\n  const content = data.choices[0].message.content.trim();\n  console.log(\"‚úÖ Final extracted content from OpenAI:\", content);\n  return content;\n}","map":{"version":3,"names":["generateMCQs","config","_data$choices$","_data$choices$$messag","topics","questionCount","difficulty","type","console","log","prompt","bodyPayload","model","messages","role","content","temperature","process","env","REACT_APP_OPENAI_API_KEY","JSON","stringify","res","fetch","method","headers","Authorization","body","networkError","error","Error","status","ok","errorText","text","data","json","choices","message","trim"],"sources":["C:/Users/gaura/mock-test-generator/src/utils/openai.js"],"sourcesContent":["// src/utils/openai.js\r\n\r\nexport async function generateMCQs(config) {\r\n  const { topics, questionCount, difficulty, type } = config;\r\n  console.log(\"üîß generateMCQs called with config:\", config);\r\n\r\n  const prompt = `\r\nGenerate a JSON array of ${questionCount} MCQs about the following topics: ${topics}.\r\nDifficulty level: ${difficulty}.\r\nQuestion type: ${type === \"single\" ? \"Single correct\" : \"Multiple correct\"} answer.\r\n\r\nEach question object should have:\r\n- \"questionText\" (string)\r\n- \"options\" (array of strings)\r\n- \"correctAnswers\" (array of strings)\r\n\r\nRespond ONLY with valid JSON.\r\n`;\r\n\r\n  const bodyPayload = {\r\n    model: \"gpt-4o\",\r\n    messages: [{ role: \"user\", content: prompt }],\r\n    temperature: 0.7,\r\n  };\r\n\r\n  console.log(\"üì§ Sending fetch request to OpenAI...\");\r\n  console.log(\"üîê Using API key:\", process.env.REACT_APP_OPENAI_API_KEY ? \"‚úÖ present\" : \"‚ùå missing\");\r\n  console.log(\"üì¶ Request body:\", JSON.stringify(bodyPayload));\r\n\r\n  let res;\r\n  try {\r\n    res = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\r\n      },\r\n      body: JSON.stringify(bodyPayload),\r\n    });\r\n  } catch (networkError) {\r\n    console.error(\"üåê Network error when contacting OpenAI:\", networkError);\r\n    throw new Error(\"Network request failed\");\r\n  }\r\n\r\n  console.log(\"üì∂ Status Code:\", res.status);\r\n\r\n  if (!res.ok) {\r\n    const errorText = await res.text();\r\n    console.error(\"‚ùå OpenAI API Error Response:\", errorText);\r\n    throw new Error(\"OpenAI API request failed\");\r\n  }\r\n\r\n  const data = await res.json();\r\n  console.log(\"üì® OpenAI JSON response:\", data);\r\n\r\n  if (!data || !data.choices || !data.choices[0]?.message?.content) {\r\n    console.error(\"‚ùå Invalid OpenAI response format:\", data);\r\n    throw new Error(\"OpenAI response missing expected content\");\r\n  }\r\n\r\n  const content = data.choices[0].message.content.trim();\r\n  console.log(\"‚úÖ Final extracted content from OpenAI:\", content);\r\n\r\n  return content;\r\n}\r\n"],"mappings":"AAAA;;AAEA,OAAO,eAAeA,YAAYA,CAACC,MAAM,EAAE;EAAA,IAAAC,cAAA,EAAAC,qBAAA;EACzC,MAAM;IAAEC,MAAM;IAAEC,aAAa;IAAEC,UAAU;IAAEC;EAAK,CAAC,GAAGN,MAAM;EAC1DO,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAER,MAAM,CAAC;EAE1D,MAAMS,MAAM,GAAG;AACjB,2BAA2BL,aAAa,qCAAqCD,MAAM;AACnF,oBAAoBE,UAAU;AAC9B,iBAAiBC,IAAI,KAAK,QAAQ,GAAG,gBAAgB,GAAG,kBAAkB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;EAEC,MAAMI,WAAW,GAAG;IAClBC,KAAK,EAAE,QAAQ;IACfC,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEL;IAAO,CAAC,CAAC;IAC7CM,WAAW,EAAE;EACf,CAAC;EAEDR,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;EACpDD,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEQ,OAAO,CAACC,GAAG,CAACC,wBAAwB,GAAG,WAAW,GAAG,WAAW,CAAC;EAClGX,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEW,IAAI,CAACC,SAAS,CAACV,WAAW,CAAC,CAAC;EAE5D,IAAIW,GAAG;EACP,IAAI;IACFA,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MAC9DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUT,OAAO,CAACC,GAAG,CAACC,wBAAwB;MAC/D,CAAC;MACDQ,IAAI,EAAEP,IAAI,CAACC,SAAS,CAACV,WAAW;IAClC,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOiB,YAAY,EAAE;IACrBpB,OAAO,CAACqB,KAAK,CAAC,0CAA0C,EAAED,YAAY,CAAC;IACvE,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EAEAtB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEa,GAAG,CAACS,MAAM,CAAC;EAE1C,IAAI,CAACT,GAAG,CAACU,EAAE,EAAE;IACX,MAAMC,SAAS,GAAG,MAAMX,GAAG,CAACY,IAAI,CAAC,CAAC;IAClC1B,OAAO,CAACqB,KAAK,CAAC,8BAA8B,EAAEI,SAAS,CAAC;IACxD,MAAM,IAAIH,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EAEA,MAAMK,IAAI,GAAG,MAAMb,GAAG,CAACc,IAAI,CAAC,CAAC;EAC7B5B,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE0B,IAAI,CAAC;EAE7C,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACE,OAAO,IAAI,GAAAnC,cAAA,GAACiC,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,cAAAnC,cAAA,gBAAAC,qBAAA,GAAfD,cAAA,CAAiBoC,OAAO,cAAAnC,qBAAA,eAAxBA,qBAAA,CAA0BY,OAAO,GAAE;IAChEP,OAAO,CAACqB,KAAK,CAAC,mCAAmC,EAAEM,IAAI,CAAC;IACxD,MAAM,IAAIL,KAAK,CAAC,0CAA0C,CAAC;EAC7D;EAEA,MAAMf,OAAO,GAAGoB,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACvB,OAAO,CAACwB,IAAI,CAAC,CAAC;EACtD/B,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEM,OAAO,CAAC;EAE9D,OAAOA,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}